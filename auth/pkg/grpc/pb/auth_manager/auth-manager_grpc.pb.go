// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: auth/pkg/grpc/proto/auth-manager.proto

package pb_auth_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthManager_CreatePublisher_FullMethodName         = "/AuthManager/CreatePublisher"
	AuthManager_RollbackCreatePublisher_FullMethodName = "/AuthManager/RollbackCreatePublisher"
)

// AuthManagerClient is the client API for AuthManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthManagerClient interface {
	CreatePublisher(ctx context.Context, in *CreatePublisherRequest, opts ...grpc.CallOption) (*Response, error)
	RollbackCreatePublisher(ctx context.Context, in *RollbackCreatePublisherRequest, opts ...grpc.CallOption) (*Response, error)
}

type authManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthManagerClient(cc grpc.ClientConnInterface) AuthManagerClient {
	return &authManagerClient{cc}
}

func (c *authManagerClient) CreatePublisher(ctx context.Context, in *CreatePublisherRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AuthManager_CreatePublisher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerClient) RollbackCreatePublisher(ctx context.Context, in *RollbackCreatePublisherRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AuthManager_RollbackCreatePublisher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthManagerServer is the server API for AuthManager service.
// All implementations must embed UnimplementedAuthManagerServer
// for forward compatibility.
type AuthManagerServer interface {
	CreatePublisher(context.Context, *CreatePublisherRequest) (*Response, error)
	RollbackCreatePublisher(context.Context, *RollbackCreatePublisherRequest) (*Response, error)
	mustEmbedUnimplementedAuthManagerServer()
}

// UnimplementedAuthManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthManagerServer struct{}

func (UnimplementedAuthManagerServer) CreatePublisher(context.Context, *CreatePublisherRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublisher not implemented")
}
func (UnimplementedAuthManagerServer) RollbackCreatePublisher(context.Context, *RollbackCreatePublisherRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackCreatePublisher not implemented")
}
func (UnimplementedAuthManagerServer) mustEmbedUnimplementedAuthManagerServer() {}
func (UnimplementedAuthManagerServer) testEmbeddedByValue()                     {}

// UnsafeAuthManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthManagerServer will
// result in compilation errors.
type UnsafeAuthManagerServer interface {
	mustEmbedUnimplementedAuthManagerServer()
}

func RegisterAuthManagerServer(s grpc.ServiceRegistrar, srv AuthManagerServer) {
	// If the following call pancis, it indicates UnimplementedAuthManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthManager_ServiceDesc, srv)
}

func _AuthManager_CreatePublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServer).CreatePublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthManager_CreatePublisher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServer).CreatePublisher(ctx, req.(*CreatePublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManager_RollbackCreatePublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackCreatePublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServer).RollbackCreatePublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthManager_RollbackCreatePublisher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServer).RollbackCreatePublisher(ctx, req.(*RollbackCreatePublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthManager_ServiceDesc is the grpc.ServiceDesc for AuthManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuthManager",
	HandlerType: (*AuthManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePublisher",
			Handler:    _AuthManager_CreatePublisher_Handler,
		},
		{
			MethodName: "RollbackCreatePublisher",
			Handler:    _AuthManager_RollbackCreatePublisher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/pkg/grpc/proto/auth-manager.proto",
}
