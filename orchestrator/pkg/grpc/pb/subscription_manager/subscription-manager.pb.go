// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v3.21.12
// source: subscription-manager.proto

package pb_subscription_manager

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsSuccess     bool                   `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_subscription_manager_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{0}
}

func (x *Response) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type JoinPublicationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PublicationId int32                  `protobuf:"varint,2,opt,name=publication_id,json=publicationId,proto3" json:"publication_id,omitempty"`
	IsPremium     bool                   `protobuf:"varint,3,opt,name=is_premium,json=isPremium,proto3" json:"is_premium,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinPublicationRequest) Reset() {
	*x = JoinPublicationRequest{}
	mi := &file_subscription_manager_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinPublicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinPublicationRequest) ProtoMessage() {}

func (x *JoinPublicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinPublicationRequest.ProtoReflect.Descriptor instead.
func (*JoinPublicationRequest) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{1}
}

func (x *JoinPublicationRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *JoinPublicationRequest) GetPublicationId() int32 {
	if x != nil {
		return x.PublicationId
	}
	return 0
}

func (x *JoinPublicationRequest) GetIsPremium() bool {
	if x != nil {
		return x.IsPremium
	}
	return false
}

type JoinPublicationResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId int32                  `protobuf:"varint,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *JoinPublicationResponse) Reset() {
	*x = JoinPublicationResponse{}
	mi := &file_subscription_manager_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinPublicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinPublicationResponse) ProtoMessage() {}

func (x *JoinPublicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinPublicationResponse.ProtoReflect.Descriptor instead.
func (*JoinPublicationResponse) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{2}
}

func (x *JoinPublicationResponse) GetSubscriptionId() int32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

type RollbackJoinPublicationRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId int32                  `protobuf:"varint,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RollbackJoinPublicationRequest) Reset() {
	*x = RollbackJoinPublicationRequest{}
	mi := &file_subscription_manager_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackJoinPublicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackJoinPublicationRequest) ProtoMessage() {}

func (x *RollbackJoinPublicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackJoinPublicationRequest.ProtoReflect.Descriptor instead.
func (*RollbackJoinPublicationRequest) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{3}
}

func (x *RollbackJoinPublicationRequest) GetSubscriptionId() int32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

type LeavePublicationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PublicationId int32                  `protobuf:"varint,2,opt,name=publication_id,json=publicationId,proto3" json:"publication_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeavePublicationRequest) Reset() {
	*x = LeavePublicationRequest{}
	mi := &file_subscription_manager_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeavePublicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeavePublicationRequest) ProtoMessage() {}

func (x *LeavePublicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeavePublicationRequest.ProtoReflect.Descriptor instead.
func (*LeavePublicationRequest) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{4}
}

func (x *LeavePublicationRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LeavePublicationRequest) GetPublicationId() int32 {
	if x != nil {
		return x.PublicationId
	}
	return 0
}

type LeavePublicationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsPremium     bool                   `protobuf:"varint,1,opt,name=is_premium,json=isPremium,proto3" json:"is_premium,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeavePublicationResponse) Reset() {
	*x = LeavePublicationResponse{}
	mi := &file_subscription_manager_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeavePublicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeavePublicationResponse) ProtoMessage() {}

func (x *LeavePublicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeavePublicationResponse.ProtoReflect.Descriptor instead.
func (*LeavePublicationResponse) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{5}
}

func (x *LeavePublicationResponse) GetIsPremium() bool {
	if x != nil {
		return x.IsPremium
	}
	return false
}

type RollbackLeavePublicationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PublicationId int32                  `protobuf:"varint,2,opt,name=publication_id,json=publicationId,proto3" json:"publication_id,omitempty"`
	IsPremium     bool                   `protobuf:"varint,3,opt,name=is_premium,json=isPremium,proto3" json:"is_premium,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollbackLeavePublicationRequest) Reset() {
	*x = RollbackLeavePublicationRequest{}
	mi := &file_subscription_manager_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackLeavePublicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackLeavePublicationRequest) ProtoMessage() {}

func (x *RollbackLeavePublicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackLeavePublicationRequest.ProtoReflect.Descriptor instead.
func (*RollbackLeavePublicationRequest) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{6}
}

func (x *RollbackLeavePublicationRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RollbackLeavePublicationRequest) GetPublicationId() int32 {
	if x != nil {
		return x.PublicationId
	}
	return 0
}

func (x *RollbackLeavePublicationRequest) GetIsPremium() bool {
	if x != nil {
		return x.IsPremium
	}
	return false
}

type ChangeSubscriberSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PublicationId int32                  `protobuf:"varint,2,opt,name=publication_id,json=publicationId,proto3" json:"publication_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeSubscriberSubscriptionRequest) Reset() {
	*x = ChangeSubscriberSubscriptionRequest{}
	mi := &file_subscription_manager_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeSubscriberSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeSubscriberSubscriptionRequest) ProtoMessage() {}

func (x *ChangeSubscriberSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeSubscriberSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*ChangeSubscriberSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{7}
}

func (x *ChangeSubscriberSubscriptionRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChangeSubscriberSubscriptionRequest) GetPublicationId() int32 {
	if x != nil {
		return x.PublicationId
	}
	return 0
}

type ChangeSubscriberSubscriptionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId int32                  `protobuf:"varint,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ChangeSubscriberSubscriptionResponse) Reset() {
	*x = ChangeSubscriberSubscriptionResponse{}
	mi := &file_subscription_manager_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeSubscriberSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeSubscriberSubscriptionResponse) ProtoMessage() {}

func (x *ChangeSubscriberSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeSubscriberSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*ChangeSubscriberSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{8}
}

func (x *ChangeSubscriberSubscriptionResponse) GetSubscriptionId() int32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

type RollbackChangeSubscriberSubscriptionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId int32                  `protobuf:"varint,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RollbackChangeSubscriberSubscriptionRequest) Reset() {
	*x = RollbackChangeSubscriberSubscriptionRequest{}
	mi := &file_subscription_manager_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackChangeSubscriberSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackChangeSubscriberSubscriptionRequest) ProtoMessage() {}

func (x *RollbackChangeSubscriberSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackChangeSubscriberSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*RollbackChangeSubscriberSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{9}
}

func (x *RollbackChangeSubscriberSubscriptionRequest) GetSubscriptionId() int32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

type ConfirmPublisherSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlanId        int32                  `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmPublisherSubscriptionRequest) Reset() {
	*x = ConfirmPublisherSubscriptionRequest{}
	mi := &file_subscription_manager_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmPublisherSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmPublisherSubscriptionRequest) ProtoMessage() {}

func (x *ConfirmPublisherSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmPublisherSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*ConfirmPublisherSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{10}
}

func (x *ConfirmPublisherSubscriptionRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ConfirmPublisherSubscriptionRequest) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

type ConfirmPublisherSubscriptionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId int32                  `protobuf:"varint,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ConfirmPublisherSubscriptionResponse) Reset() {
	*x = ConfirmPublisherSubscriptionResponse{}
	mi := &file_subscription_manager_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmPublisherSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmPublisherSubscriptionResponse) ProtoMessage() {}

func (x *ConfirmPublisherSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmPublisherSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*ConfirmPublisherSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{11}
}

func (x *ConfirmPublisherSubscriptionResponse) GetSubscriptionId() int32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

type RollbackConfirmPublisherSubscriptionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId int32                  `protobuf:"varint,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RollbackConfirmPublisherSubscriptionRequest) Reset() {
	*x = RollbackConfirmPublisherSubscriptionRequest{}
	mi := &file_subscription_manager_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackConfirmPublisherSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackConfirmPublisherSubscriptionRequest) ProtoMessage() {}

func (x *RollbackConfirmPublisherSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackConfirmPublisherSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*RollbackConfirmPublisherSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{12}
}

func (x *RollbackConfirmPublisherSubscriptionRequest) GetSubscriptionId() int32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

type RevokePublisherSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlanId        int32                  `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokePublisherSubscriptionRequest) Reset() {
	*x = RevokePublisherSubscriptionRequest{}
	mi := &file_subscription_manager_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokePublisherSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokePublisherSubscriptionRequest) ProtoMessage() {}

func (x *RevokePublisherSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokePublisherSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*RevokePublisherSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{13}
}

func (x *RevokePublisherSubscriptionRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RevokePublisherSubscriptionRequest) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

type RevokePublisherSubscriptionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlanId        int32                  `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokePublisherSubscriptionResponse) Reset() {
	*x = RevokePublisherSubscriptionResponse{}
	mi := &file_subscription_manager_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokePublisherSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokePublisherSubscriptionResponse) ProtoMessage() {}

func (x *RevokePublisherSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokePublisherSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*RevokePublisherSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{14}
}

func (x *RevokePublisherSubscriptionResponse) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

type RollbackRevokePublisherSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlanId        int32                  `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollbackRevokePublisherSubscriptionRequest) Reset() {
	*x = RollbackRevokePublisherSubscriptionRequest{}
	mi := &file_subscription_manager_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackRevokePublisherSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackRevokePublisherSubscriptionRequest) ProtoMessage() {}

func (x *RollbackRevokePublisherSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackRevokePublisherSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*RollbackRevokePublisherSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{15}
}

func (x *RollbackRevokePublisherSubscriptionRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RollbackRevokePublisherSubscriptionRequest) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

type ChangePublisherSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlanId        int32                  `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangePublisherSubscriptionRequest) Reset() {
	*x = ChangePublisherSubscriptionRequest{}
	mi := &file_subscription_manager_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangePublisherSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePublisherSubscriptionRequest) ProtoMessage() {}

func (x *ChangePublisherSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePublisherSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*ChangePublisherSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{16}
}

func (x *ChangePublisherSubscriptionRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChangePublisherSubscriptionRequest) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

type ChangePublisherSubscriptionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId int32                  `protobuf:"varint,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	OldPlanId      int32                  `protobuf:"varint,2,opt,name=old_plan_id,json=oldPlanId,proto3" json:"old_plan_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ChangePublisherSubscriptionResponse) Reset() {
	*x = ChangePublisherSubscriptionResponse{}
	mi := &file_subscription_manager_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangePublisherSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePublisherSubscriptionResponse) ProtoMessage() {}

func (x *ChangePublisherSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePublisherSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*ChangePublisherSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{17}
}

func (x *ChangePublisherSubscriptionResponse) GetSubscriptionId() int32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

func (x *ChangePublisherSubscriptionResponse) GetOldPlanId() int32 {
	if x != nil {
		return x.OldPlanId
	}
	return 0
}

type RollbackChangePublisherSubscriptionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId int32                  `protobuf:"varint,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	OldPlanId      int32                  `protobuf:"varint,2,opt,name=old_plan_id,json=oldPlanId,proto3" json:"old_plan_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RollbackChangePublisherSubscriptionRequest) Reset() {
	*x = RollbackChangePublisherSubscriptionRequest{}
	mi := &file_subscription_manager_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackChangePublisherSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackChangePublisherSubscriptionRequest) ProtoMessage() {}

func (x *RollbackChangePublisherSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_manager_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackChangePublisherSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*RollbackChangePublisherSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_subscription_manager_proto_rawDescGZIP(), []int{18}
}

func (x *RollbackChangePublisherSubscriptionRequest) GetSubscriptionId() int32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

func (x *RollbackChangePublisherSubscriptionRequest) GetOldPlanId() int32 {
	if x != nil {
		return x.OldPlanId
	}
	return 0
}

var File_subscription_manager_proto protoreflect.FileDescriptor

var file_subscription_manager_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x77, 0x0a, 0x16, 0x4a, 0x6f, 0x69, 0x6e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x22, 0x42, 0x0a, 0x17, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x1e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x59, 0x0a, 0x17, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x18, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x22, 0x80, 0x01, 0x0a, 0x1f, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x22, 0x65, 0x0a, 0x23, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x4f, 0x0a, 0x24, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x56, 0x0a, 0x2b, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x23, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x22, 0x4f, 0x0a, 0x24, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x56, 0x0a, 0x2b, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x22, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x22, 0x3e, 0x0a, 0x23, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x22, 0x5e, 0x0a, 0x2a, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x22, 0x56, 0x0a, 0x22, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x23, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x6c,
	0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6f, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x2a, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x32, 0xe2, 0x08, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0f, 0x4a, 0x6f, 0x69,
	0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x4a,
	0x6f, 0x69, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x17, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x18, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x24, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x24, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x1b, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d,
	0x0a, 0x23, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a,
	0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x23, 0x52, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x30, 0x5a, 0x2e, 0x2e, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x3b, 0x70, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_subscription_manager_proto_rawDescOnce sync.Once
	file_subscription_manager_proto_rawDescData = file_subscription_manager_proto_rawDesc
)

func file_subscription_manager_proto_rawDescGZIP() []byte {
	file_subscription_manager_proto_rawDescOnce.Do(func() {
		file_subscription_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_subscription_manager_proto_rawDescData)
	})
	return file_subscription_manager_proto_rawDescData
}

var file_subscription_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_subscription_manager_proto_goTypes = []any{
	(*Response)(nil),                                    // 0: Response
	(*JoinPublicationRequest)(nil),                      // 1: JoinPublicationRequest
	(*JoinPublicationResponse)(nil),                     // 2: JoinPublicationResponse
	(*RollbackJoinPublicationRequest)(nil),              // 3: RollbackJoinPublicationRequest
	(*LeavePublicationRequest)(nil),                     // 4: LeavePublicationRequest
	(*LeavePublicationResponse)(nil),                    // 5: LeavePublicationResponse
	(*RollbackLeavePublicationRequest)(nil),             // 6: RollbackLeavePublicationRequest
	(*ChangeSubscriberSubscriptionRequest)(nil),         // 7: ChangeSubscriberSubscriptionRequest
	(*ChangeSubscriberSubscriptionResponse)(nil),        // 8: ChangeSubscriberSubscriptionResponse
	(*RollbackChangeSubscriberSubscriptionRequest)(nil), // 9: RollbackChangeSubscriberSubscriptionRequest
	(*ConfirmPublisherSubscriptionRequest)(nil),         // 10: ConfirmPublisherSubscriptionRequest
	(*ConfirmPublisherSubscriptionResponse)(nil),        // 11: ConfirmPublisherSubscriptionResponse
	(*RollbackConfirmPublisherSubscriptionRequest)(nil), // 12: RollbackConfirmPublisherSubscriptionRequest
	(*RevokePublisherSubscriptionRequest)(nil),          // 13: RevokePublisherSubscriptionRequest
	(*RevokePublisherSubscriptionResponse)(nil),         // 14: RevokePublisherSubscriptionResponse
	(*RollbackRevokePublisherSubscriptionRequest)(nil),  // 15: RollbackRevokePublisherSubscriptionRequest
	(*ChangePublisherSubscriptionRequest)(nil),          // 16: ChangePublisherSubscriptionRequest
	(*ChangePublisherSubscriptionResponse)(nil),         // 17: ChangePublisherSubscriptionResponse
	(*RollbackChangePublisherSubscriptionRequest)(nil),  // 18: RollbackChangePublisherSubscriptionRequest
}
var file_subscription_manager_proto_depIdxs = []int32{
	1,  // 0: SubscriptionManager.JoinPublication:input_type -> JoinPublicationRequest
	3,  // 1: SubscriptionManager.RollbackJoinPublication:input_type -> RollbackJoinPublicationRequest
	4,  // 2: SubscriptionManager.LeavePublication:input_type -> LeavePublicationRequest
	6,  // 3: SubscriptionManager.RollbackLeavePublication:input_type -> RollbackLeavePublicationRequest
	7,  // 4: SubscriptionManager.ChangeSubscriberSubscription:input_type -> ChangeSubscriberSubscriptionRequest
	9,  // 5: SubscriptionManager.RollbackChangeSubscriberSubscription:input_type -> RollbackChangeSubscriberSubscriptionRequest
	10, // 6: SubscriptionManager.ConfirmPublisherSubscription:input_type -> ConfirmPublisherSubscriptionRequest
	12, // 7: SubscriptionManager.RollbackConfirmPublisherSubscription:input_type -> RollbackConfirmPublisherSubscriptionRequest
	13, // 8: SubscriptionManager.RevokePublisherSubscription:input_type -> RevokePublisherSubscriptionRequest
	15, // 9: SubscriptionManager.RollbackRevokePublisherSubscription:input_type -> RollbackRevokePublisherSubscriptionRequest
	16, // 10: SubscriptionManager.ChangePublisherSubscription:input_type -> ChangePublisherSubscriptionRequest
	18, // 11: SubscriptionManager.RollbackChangePublisherSubscription:input_type -> RollbackChangePublisherSubscriptionRequest
	2,  // 12: SubscriptionManager.JoinPublication:output_type -> JoinPublicationResponse
	0,  // 13: SubscriptionManager.RollbackJoinPublication:output_type -> Response
	5,  // 14: SubscriptionManager.LeavePublication:output_type -> LeavePublicationResponse
	0,  // 15: SubscriptionManager.RollbackLeavePublication:output_type -> Response
	8,  // 16: SubscriptionManager.ChangeSubscriberSubscription:output_type -> ChangeSubscriberSubscriptionResponse
	0,  // 17: SubscriptionManager.RollbackChangeSubscriberSubscription:output_type -> Response
	11, // 18: SubscriptionManager.ConfirmPublisherSubscription:output_type -> ConfirmPublisherSubscriptionResponse
	0,  // 19: SubscriptionManager.RollbackConfirmPublisherSubscription:output_type -> Response
	14, // 20: SubscriptionManager.RevokePublisherSubscription:output_type -> RevokePublisherSubscriptionResponse
	0,  // 21: SubscriptionManager.RollbackRevokePublisherSubscription:output_type -> Response
	17, // 22: SubscriptionManager.ChangePublisherSubscription:output_type -> ChangePublisherSubscriptionResponse
	0,  // 23: SubscriptionManager.RollbackChangePublisherSubscription:output_type -> Response
	12, // [12:24] is the sub-list for method output_type
	0,  // [0:12] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_subscription_manager_proto_init() }
func file_subscription_manager_proto_init() {
	if File_subscription_manager_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_subscription_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_subscription_manager_proto_goTypes,
		DependencyIndexes: file_subscription_manager_proto_depIdxs,
		MessageInfos:      file_subscription_manager_proto_msgTypes,
	}.Build()
	File_subscription_manager_proto = out.File
	file_subscription_manager_proto_rawDesc = nil
	file_subscription_manager_proto_goTypes = nil
	file_subscription_manager_proto_depIdxs = nil
}
